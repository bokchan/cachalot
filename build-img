#!/bin/sh
set -e

DOCKER_BUILD_FLAGS=${DOCKER_BUILD_FLAGS:---no-cache --force-rm}
DOCKER_PUSH_FLAGS=${DOCKER_PUSH_FLAGS:-}

print_usage() {
	cat <<HELP >&2
Usage: $0 [options] DOCKERFILE DOCKERHUB_ORG DIST...

Builds a DOCKERFILE for all the specified DISTROs, using DOCKERHUB_ORG as the
organization to tag the images.

The DOCKERFILE file name is expected to be in the form IMG.Dockerfile, where
IMG is the name will be used as the image to tag (the image name will be then
DOCKERHUB_ORG/IMG).

To build the same Dockerfile for several images, the FROM line in the
DOCKERFILE is expected not to specify a tag (:TAG), so this script will append
:BRANCH-DIST to the FROM.

Options:

-p         if present images will be pushed to the dockerhub registry.
-l LATEST  tag images as default if the distro being built matches LATEST.
-h         show this help message and exit.

Environment variables:

DOCKER_BUILD_FLAGS
           flags to pass to the "docker build" command
	   (default: $DOCKER_BUILD_FLAGS)
DOCKER_PUSH_FLAGS
           flags to pass to the "docker push" command
	   (default: $DOCKER_BUILD_FLAGS)

Examples:

# builds base image for sociomantictsunami only for trusty and without ever
# marking anything as latest and not pushing anything
$0 base.Dockerfile sociomantictsunami trusty

# builds base image for someorg for trusty and xenial marking xenial as the
# latest, and push everything built to the registry (build images using only
# the --force-rm flag, so uses the cache)
DOCKER_BUILD_FLAGS="--force-rm" $0 -p -l xenial base.Dockerfile someorg \
       	trusty xenial
HELP
	exit 2
}

# Parse arguments
push=0
latest_dist=
while getopts pl:h flag
do
    case $flag in
        p)  push=1;;
        l)  latest_dist="$OPTARG";;
        h)  print_usage ; exit 0;;
        \?) echo >&2; print_usage >&2; exit 2;;
    esac
done
shift `expr $OPTIND - 1`

test $# -gt 2 || {
	print_usage >&2
	exit 2
}

dockerfile="$1"
dockerhub_org="$2"
shift 2
# The rest are distros

img="$dockerhub_org/$(basename $dockerfile .Dockerfile)"
branch=$(git rev-parse --abbrev-ref HEAD || echo UNKNOWN)

for dist in "$@"
do
	tmpdockerfile="$dockerfile.$branch-$dist.tmp"

	trap "rm -f '$tmpdockerfile'; exit 1" INT TERM QUIT

	tag="$img:$branch-$dist"
	cp "$dockerfile" "$tmpdockerfile"
	ours=$(grep '^FROM\s\+sociomantictsunami/' "$tmpdockerfile" || true)
	# If it's based in one of our images, then we include the branch,
	# otherwise we assume is an ubuntu image and only use the dist.
	if test -n "$ours"
	then
		sed -i 's/^\(FROM\s\+.\+\)$/\1:'$branch-$dist'/' "$tmpdockerfile"
	else
		sed -i 's/^\(FROM\s\+.\+\)$/\1:'$dist'/' "$tmpdockerfile"
	fi
	echo BUILDING $tag
	docker build $DOCKER_BUILD_FLAGS -t "$tag" -f "$tmpdockerfile" .
	status=$?
	if test "$status" -ne 0
	then
		echo "ERROR building $tag (status: $status)" >&2
		exit $status
	fi
	if test "$push" = 1
	then
		echo PUSHING $tag
		docker push $DOCKER_PUSH_FLAGS "$tag"
	fi
	if test "$dist" = "$latest_dist"
	then
		echo TAGGING $tag $img
		docker tag "$img:$branch-$dist" "$img"
		if test "$push" = 1
		then
			echo PUSHING $img
			docker push $DOCKER_PUSH_FLAGS "$img"
		fi
	fi
done

rm -f "$tmpdockerfile"
